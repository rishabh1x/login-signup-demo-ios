//
//  EmailVerifyViewController.swift
//  Basis-Auth-Demo
//
//  Created by rishabh on 05/05/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EmailVerifyDisplayLogic: AnyObject
{
    func displayInputEmail(viewModel: EmailVerify.GetEmail.ViewModel)
    func prepareRouterForDashboardTransition(viewModel: EmailVerify.VerifyAction.ViewModel)
    func displayVerifyActionFailed()
}

class EmailVerifyViewController: UIViewController, EmailVerifyDisplayLogic
{
    var interactor: EmailVerifyBusinessLogic?
    var router: (NSObjectProtocol & EmailVerifyRoutingLogic & EmailVerifyDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = EmailVerifyInteractor()
        let presenter = EmailVerifyPresenter()
        let router = EmailVerifyRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    func prepareForDashboardTransition() {
        if let router = router {
            router.routeToDashboardScene()
        }
    }
    
    // MARK: View lifecycle
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(note:)), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(note:)), name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setTextFieldUI()
        getUserInputEmail()
        interactor?.printValues()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.removeObserver(self, name: UIResponder.keyboardWillHideNotification, object: nil)
    }
    
    func setTextFieldUI() {
        codeTextField.layer.borderWidth = 2.00
        codeTextField.layer.borderColor = UIColor.systemIndigo.cgColor
    }
    
    func displayInputEmail(viewModel: EmailVerify.GetEmail.ViewModel)
    {
        labelEmailInfo.text = viewModel.strEmail
    }
    
    func prepareRouterForDashboardTransition(viewModel: EmailVerify.VerifyAction.ViewModel) {
        
    }
    
    func displayVerifyActionFailed() {
        codeTextField.layer.borderColor = UIColor.systemRed.cgColor
    }
    
    // MARK: Implementations
    @IBOutlet weak var codeTextField: UITextField!
    @IBOutlet weak var buttonVerifyEmail: UIButton!
    @IBOutlet weak var labelEmailInfo: UILabel!
    @IBOutlet weak var containerStackViewBottomConstraint: NSLayoutConstraint!
    
    @IBAction func buttonVerifyPressed(_ sender: Any) {
        if (codeTextField.text?.trimmingCharacters(in: .whitespacesAndNewlines).count ?? 0) == 6 {
            
        }
        else {
            codeTextField.layer.borderColor = UIColor.systemGray2.cgColor
        }
    }
    
    func getUserInputEmail()
    {
        let request = EmailVerify.GetEmail.Request()
        interactor?.getInputEmail(request: request)
    }
    
    func showAlert(message: String) {
        let alert = UIAlertController(title: "", message: message, preferredStyle: .actionSheet)
        
        alert.addAction(UIAlertAction(title: "Dismiss", style: .cancel, handler:{ (UIAlertAction)in
            print("Dismiss button")
        }))

        self.present(alert, animated: true, completion: {
            print("completion block")
        })
    }
    
    // MARK: Keyboard
    @objc func keyboardWillShow(note:Notification) {
        guard let keyboardFrame = note.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue else {return}
        let keyboardRect = keyboardFrame.cgRectValue
        let keyboardHeight = keyboardRect.height
        
        containerStackViewBottomConstraint.constant = keyboardHeight - 20.00
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
    
    @objc func keyboardWillHide(note:Notification) {
        containerStackViewBottomConstraint.constant = 0.00
        UIView.animate(withDuration: 0.3) {
            self.view.layoutIfNeeded()
        }
    }
}
